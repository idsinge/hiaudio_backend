{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,GCIA,IAAM,EAAa,SAAS,cAAc,CAAC,qBACrC,EAAY,SAAS,cAAc,CAAC,mBAEnC,OAAM,EAET,aAAc,CACV,IAAI,CAAC,qBAAqB,CAAG,EAC7B,IAAI,CAAC,eAAe,CAAG,KACvB,IAAI,CAAC,QAAQ,CAAG,KAChB,IAAI,CAAC,cAAc,CAAG,IAC1B,CAEA,KAAK,CAAc,CAAE,CAAS,CAAC,CAC3B,IAAI,CAAC,cAAc,CAAG,EACtB,IAAI,CAAC,eAAe,CAAG,EACvB,IAAI,CAAC,qBAAqB,EAC9B,CACA,uBAAuB,CAEnB,IAAM,EAAU,aAAa,OAAO,CAAC,UACrC,CAAA,IAAI,CAAC,qBAAqB,CAAG,EAAU,SAAS,GAAW,IAAI,CAAC,qBAAqB,CAErF,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,eAAe,CAAC,cAAc,GAGnD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAEzC,IAAI,CAAC,aAAa,GAElB,IAAI,CAAC,UAAU,EACnB,CACA,cAAc,CACV,IAAM,EAAM,IAAI,CACV,EAAe,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAC9C,EAAY,IAAI,WAAW,GACjC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,GACpC,cAAc,EAAc,GAC5B,sBAAsB,KAClB,EAAG,YAAY,EACnB,EACJ,CACA,eAAe,CACX,IAAM,EAAM,IAAI,CACV,EAAO,IAAI,CAAC,YAAY,EAC9B,CAAA,EAAU,KAAK,CAAC,KAAK,CAAG,CAAC,EAAE,AAAO,IAAP,EAAW,CAAC,CAAC,CACxC,sBAAsB,KAClB,EAAG,aAAa,EACpB,EACJ,CACA,cAAc,CACV,IAAM,EAAQ,IAAI,WAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAElD,OADA,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,GAC7B,EAAM,MAAM,CAAC,CAAC,EAAK,IAAY,KAAK,GAAG,CAAC,EAAK,KAAK,GAAG,CAAC,EAAU,MAAO,GAAK,GACvF,CACA,MAAM,eAAe,CACjB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAC1D,CACA,kBAAkB,CACd,IAAI,CAAC,QAAQ,CAAC,UAAU,EAC5B,CACA,YAAY,CACR,IAAM,EAAK,IAAI,CACf,EAAE,wBAAwB,EAAE,CAAC,gBAAiB,AAAC,IAC3C,EAAW,KAAK,CAAG,EAAG,qBAAqB,CAC3C,SAAS,cAAc,CAAC,+BAA+B,KAAK,CAAG,EAAG,qBAAqB,AAC3F,GACA,EAAE,wBAAwB,EAAE,CAAC,gBAAiB,MAAO,IACjD,EAAG,QAAQ,CAAC,UAAU,EAC1B,GAEA,EAAW,gBAAgB,CAAC,QAAS,WACjC,IAAM,EAAe,WAAW,IAAI,CAAC,KAAK,CAC1C,CAAA,EAAG,qBAAqB,CAAG,EAC3B,EAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAG,EAC/B,aAAa,OAAO,CAAC,UAAW,GAChC,SAAS,cAAc,CAAC,+BAA+B,KAAK,CAAG,CACnE,EACJ,CACJ,C,G,E","sources":["<anon>","src/pages/composition/scripts/webdictaphone/webdictaphone.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire1e7e\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire1e7e\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"04BFj\", function(module, exports) {\n\n$parcel$export(module.exports, \"TestMic\", () => $00dd97663630ab9a$export$a131b61ceae72f7a);\n//import { setCanvasData } from './webdictaphone_ui'\n/* SOURCE: https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone */ const $00dd97663630ab9a$var$gainSlider = document.getElementById(\"gainSliderTestMic\");\nconst $00dd97663630ab9a$var$indicator = document.getElementById(\"volume-indicator\");\nclass $00dd97663630ab9a$export$a131b61ceae72f7a {\n    constructor(){\n        this.CURRENT_GAIN_TEST_MIC = 1;\n        this.audioCtxTestMic = null;\n        this.analyser = null;\n        this.recordGainNode = null;\n    }\n    init(recordGainNode, audioctxt) {\n        this.recordGainNode = recordGainNode;\n        this.audioCtxTestMic = audioctxt;\n        this.getUserMediaOnSuccess();\n    }\n    getUserMediaOnSuccess() {\n        const micGain = localStorage.getItem(\"micgain\");\n        this.CURRENT_GAIN_TEST_MIC = micGain ? parseInt(micGain) : this.CURRENT_GAIN_TEST_MIC;\n        this.analyser = this.audioCtxTestMic.createAnalyser();\n        //this.analyser.fftSize = 2048\n        this.recordGainNode.connect(this.analyser);\n        this.drawVolumeter();\n        //this.drawWaveForm()\n        this.uiHandlers();\n    }\n    drawWaveForm() {\n        const me = this;\n        const bufferLength = this.analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        this.analyser.getByteTimeDomainData(dataArray);\n        setCanvasData(bufferLength, dataArray);\n        requestAnimationFrame(()=>{\n            me.drawWaveForm();\n        });\n    }\n    drawVolumeter() {\n        const me = this;\n        const peak = this.getPeakLevel();\n        $00dd97663630ab9a$var$indicator.style.width = `${peak * 100}%`;\n        requestAnimationFrame(()=>{\n            me.drawVolumeter();\n        });\n    }\n    getPeakLevel() {\n        const array = new Uint8Array(this.analyser.fftSize);\n        this.analyser.getByteTimeDomainData(array);\n        return array.reduce((max, current)=>Math.max(max, Math.abs(current - 127)), 0) / 128;\n    }\n    async connectSource() {\n        this.analyser.connect(this.audioCtxTestMic.destination);\n    }\n    disconnectSource() {\n        this.analyser.disconnect();\n    }\n    uiHandlers() {\n        const me = this;\n        $(\"#testMicrophoneModal\").on(\"show.bs.modal\", (event)=>{\n            $00dd97663630ab9a$var$gainSlider.value = me.CURRENT_GAIN_TEST_MIC;\n            document.getElementById(\"current-input-gain-test-mic\").value = me.CURRENT_GAIN_TEST_MIC;\n        });\n        $(\"#testMicrophoneModal\").on(\"hide.bs.modal\", async (event)=>{\n            me.analyser.disconnect();\n        });\n        $00dd97663630ab9a$var$gainSlider.addEventListener(\"input\", function() {\n            const newGainValue = parseFloat(this.value);\n            me.CURRENT_GAIN_TEST_MIC = newGainValue;\n            me.recordGainNode.gain.value = newGainValue;\n            localStorage.setItem(\"micgain\", newGainValue);\n            document.getElementById(\"current-input-gain-test-mic\").value = newGainValue;\n        });\n    }\n}\n\n});\n\n\nparcelRequire(\"04BFj\");\n\n//# sourceMappingURL=composition.d3d7f004.js.map\n","//import { setCanvasData } from './webdictaphone_ui'\n\n/* SOURCE: https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone */\n\nconst gainSlider = document.getElementById('gainSliderTestMic')\nconst indicator = document.getElementById('volume-indicator')\n\nexport class TestMic {\n    \n    constructor() {\n        this.CURRENT_GAIN_TEST_MIC = 1\n        this.audioCtxTestMic = null\n        this.analyser = null\n        this.recordGainNode = null\n    }  \n\n    init(recordGainNode, audioctxt){\n        this.recordGainNode = recordGainNode\n        this.audioCtxTestMic = audioctxt\n        this.getUserMediaOnSuccess()\n    }\n    getUserMediaOnSuccess(){\n\n        const micGain = localStorage.getItem('micgain')\n        this.CURRENT_GAIN_TEST_MIC = micGain ? parseInt(micGain) : this.CURRENT_GAIN_TEST_MIC\n       \n        this.analyser = this.audioCtxTestMic.createAnalyser()\n        //this.analyser.fftSize = 2048\n\n        this.recordGainNode.connect(this.analyser)\n       \n        this.drawVolumeter()\n        //this.drawWaveForm()\n        this.uiHandlers()       \n    }\n    drawWaveForm(){\n        const me  = this\n        const bufferLength = this.analyser.frequencyBinCount\n        const dataArray = new Uint8Array(bufferLength)\n        this.analyser.getByteTimeDomainData(dataArray)\n        setCanvasData(bufferLength, dataArray)\n        requestAnimationFrame(() => {\n            me.drawWaveForm()\n        })\n    }\n    drawVolumeter(){\n        const me  = this\n        const peak = this.getPeakLevel()\n        indicator.style.width = `${peak * 100}%`\n        requestAnimationFrame(() => {\n            me.drawVolumeter()\n        })\n    }\n    getPeakLevel(){\n        const array = new Uint8Array(this.analyser.fftSize);\n        this.analyser.getByteTimeDomainData(array);\n        return array.reduce((max, current) => Math.max(max, Math.abs(current - 127)), 0) / 128;\n    }\n    async connectSource(){\n        this.analyser.connect(this.audioCtxTestMic.destination)\n    }\n    disconnectSource(){\n        this.analyser.disconnect()\n    }\n    uiHandlers(){\n        const me = this\n        $('#testMicrophoneModal').on('show.bs.modal', (event) => {\n            gainSlider.value = me.CURRENT_GAIN_TEST_MIC\n            document.getElementById('current-input-gain-test-mic').value = me.CURRENT_GAIN_TEST_MIC\n        })\n        $('#testMicrophoneModal').on('hide.bs.modal', async (event) => {\n            me.analyser.disconnect()\n        })\n        \n        gainSlider.addEventListener('input', function () {\n            const newGainValue = parseFloat(this.value)\n            me.CURRENT_GAIN_TEST_MIC = newGainValue\n            me.recordGainNode.gain.value = newGainValue\n            localStorage.setItem('micgain', newGainValue)\n            document.getElementById('current-input-gain-test-mic').value = newGainValue\n        })\n    }\n}"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$00dd97663630ab9a$export$a131b61ceae72f7a","set","s","enumerable","configurable","$00dd97663630ab9a$var$gainSlider","document","getElementById","$00dd97663630ab9a$var$indicator","constructor","CURRENT_GAIN_TEST_MIC","audioCtxTestMic","analyser","recordGainNode","audioctxt","getUserMediaOnSuccess","micGain","localStorage","getItem","parseInt","createAnalyser","connect","drawVolumeter","uiHandlers","drawWaveForm","me","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","setCanvasData","requestAnimationFrame","peak","getPeakLevel","style","width","array","fftSize","reduce","max","current","Math","abs","connectSource","destination","disconnectSource","disconnect","$","on","event","value","addEventListener","newGainValue","parseFloat","gain","setItem"],"version":3,"file":"composition.d3d7f004.js.map"}