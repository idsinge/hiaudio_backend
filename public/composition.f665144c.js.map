{"mappings":"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","sources":["<anon>","src/pages/composition/scripts/webdictaphone/webdictaphone.js","src/pages/composition/scripts/webdictaphone/webdictaphone_ui.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire1e7e\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire1e7e\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"04BFj\", function(module, exports) {\n\n$parcel$export(module.exports, \"TestMic\", () => $00dd97663630ab9a$export$a131b61ceae72f7a);\n\nvar $4TAOB = parcelRequire(\"4TAOB\");\n/* SOURCE: https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone */ const $00dd97663630ab9a$var$gainSlider = document.getElementById(\"gainSliderTestMic\");\nclass $00dd97663630ab9a$export$a131b61ceae72f7a {\n    constructor(){\n        this.CURRENT_GAIN_TEST_MIC = 1;\n        this.audioCtxTestMic = null;\n        this.analyser = null;\n        this.gainNode = null;\n        this.recordGainNode = null;\n    }\n    init(recordGainNode) {\n        const me = this;\n        if (navigator.mediaDevices.getUserMedia) {\n            const constraints = {\n                audio: {\n                    echoCancellation: false,\n                    noiseSuppression: false,\n                    autoGainControl: false\n                }\n            };\n            const onSuccess = function(stream) {\n                me.recordGainNode = recordGainNode;\n                me.getUserMediaOnSuccess(stream);\n            };\n            const onError = function(err) {\n                console.log(\"The following error occured: \" + err);\n            };\n            navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n        } else console.log(\"MediaDevices.getUserMedia() not supported on your browser!\");\n    }\n    getUserMediaOnSuccess(stream) {\n        const micGain = localStorage.getItem(\"micgain\");\n        this.CURRENT_GAIN_TEST_MIC = micGain ? parseInt(micGain) : this.CURRENT_GAIN_TEST_MIC;\n        if (!this.audioCtxTestMic) this.audioCtxTestMic = new AudioContext();\n        const micsource = this.audioCtxTestMic.createMediaStreamSource(stream);\n        this.gainNode = this.audioCtxTestMic.createGain();\n        this.gainNode.gain.value = this.CURRENT_GAIN_TEST_MIC;\n        micsource.connect(this.gainNode);\n        this.analyser = this.audioCtxTestMic.createAnalyser();\n        this.analyser.fftSize = 2048;\n        this.gainNode.connect(this.analyser);\n        const dest = this.audioCtxTestMic.createMediaStreamDestination();\n        this.gainNode.connect(dest);\n        this.draw();\n        this.uiHandlers();\n    }\n    draw() {\n        const me = this;\n        const bufferLength = this.analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        this.analyser.getByteTimeDomainData(dataArray);\n        (0, $4TAOB.setCanvasData)(bufferLength, dataArray);\n        requestAnimationFrame(()=>{\n            me.draw();\n        });\n    }\n    async connectSource() {\n        this.analyser.connect(this.audioCtxTestMic.destination);\n    }\n    disconnectSource() {\n        this.analyser.disconnect();\n    }\n    uiHandlers() {\n        const me = this;\n        $(\"#testMicrophoneModal\").on(\"show.bs.modal\", (event)=>{\n            $00dd97663630ab9a$var$gainSlider.value = me.CURRENT_GAIN_TEST_MIC;\n            document.getElementById(\"current-input-gain-test-mic\").value = me.CURRENT_GAIN_TEST_MIC;\n        });\n        $(\"#testMicrophoneModal\").on(\"hide.bs.modal\", async (event)=>{\n            me.analyser.disconnect();\n        });\n        $00dd97663630ab9a$var$gainSlider.addEventListener(\"input\", function() {\n            const newGainValue = parseFloat(this.value);\n            me.CURRENT_GAIN_TEST_MIC = newGainValue;\n            me.gainNode.gain.value = newGainValue;\n            me.recordGainNode.gain.value = newGainValue;\n            localStorage.setItem(\"micgain\", newGainValue);\n            document.getElementById(\"current-input-gain-test-mic\").value = newGainValue;\n        });\n    }\n}\n\n});\nparcelRegister(\"4TAOB\", function(module, exports) {\n\n$parcel$export(module.exports, \"setCanvasData\", () => $3908db37c08cb4c3$export$d4c23ad8b5f39249);\nconst $3908db37c08cb4c3$var$canvasRealTime = document.querySelector(\".visualizer-test-mic\");\nconst $3908db37c08cb4c3$var$canvasCtx = $3908db37c08cb4c3$var$canvasRealTime.getContext(\"2d\");\nconst $3908db37c08cb4c3$var$mainSection = document.querySelector(\".main-controls-test-mic\");\nconst $3908db37c08cb4c3$export$d4c23ad8b5f39249 = (bufferLength, dataArray)=>{\n    $3908db37c08cb4c3$var$canvasRealTime.width = $3908db37c08cb4c3$var$mainSection.offsetWidth;\n    const WIDTH = $3908db37c08cb4c3$var$canvasRealTime.width;\n    const HEIGHT = $3908db37c08cb4c3$var$canvasRealTime.height;\n    $3908db37c08cb4c3$var$canvasCtx.fillStyle = \"rgb(200, 200, 200)\";\n    $3908db37c08cb4c3$var$canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n    $3908db37c08cb4c3$var$canvasCtx.lineWidth = 2;\n    $3908db37c08cb4c3$var$canvasCtx.strokeStyle = \"rgb(0, 0, 0)\";\n    $3908db37c08cb4c3$var$canvasCtx.beginPath();\n    let sliceWidth = WIDTH * 1.0 / bufferLength;\n    let x = 0;\n    for(let i = 0; i < bufferLength; i++){\n        let v = dataArray[i] / 128.0;\n        let y = v * HEIGHT / 2;\n        if (i === 0) $3908db37c08cb4c3$var$canvasCtx.moveTo(x, y);\n        else $3908db37c08cb4c3$var$canvasCtx.lineTo(x, y);\n        x += sliceWidth;\n    }\n    $3908db37c08cb4c3$var$canvasCtx.lineTo($3908db37c08cb4c3$var$canvasRealTime.width, $3908db37c08cb4c3$var$canvasRealTime.height / 2);\n    $3908db37c08cb4c3$var$canvasCtx.stroke();\n};\n\n});\n\n\n\nparcelRequire(\"04BFj\");\n\n//# sourceMappingURL=composition.f665144c.js.map\n","import { setCanvasData } from './webdictaphone_ui'\n\n/* SOURCE: https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone */\n\nconst gainSlider = document.getElementById('gainSliderTestMic')\n\nexport class TestMic {\n    \n    constructor() {\n        this.CURRENT_GAIN_TEST_MIC = 1\n        this.audioCtxTestMic = null\n        this.analyser = null\n        this.gainNode = null\n        this.recordGainNode = null\n    }  \n\n    init(recordGainNode){\n        \n        const me  = this\n        \n        if (navigator.mediaDevices.getUserMedia) {\n\n            const constraints = { audio: { echoCancellation: false, noiseSuppression: false, autoGainControl: false } }\n\n            const onSuccess = function (stream) {\n                me.recordGainNode = recordGainNode\n                me.getUserMediaOnSuccess(stream)\n            }\n\n            const onError = function (err) {\n                console.log('The following error occured: ' + err)\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError)\n\n        } else {\n            console.log('MediaDevices.getUserMedia() not supported on your browser!')\n        }\n    }\n    getUserMediaOnSuccess(stream){\n\n        const micGain = localStorage.getItem('micgain')\n        this.CURRENT_GAIN_TEST_MIC = micGain ? parseInt(micGain) : this.CURRENT_GAIN_TEST_MIC\n        \n        if (!this.audioCtxTestMic) {\n            this.audioCtxTestMic = new AudioContext()\n        }\n    \n        const micsource = this.audioCtxTestMic.createMediaStreamSource(stream)\n    \n        this.gainNode = this.audioCtxTestMic.createGain()\n        this.gainNode.gain.value = this.CURRENT_GAIN_TEST_MIC\n    \n        micsource.connect(this.gainNode)\n        this.analyser = this.audioCtxTestMic.createAnalyser()\n        this.analyser.fftSize = 2048\n        this.gainNode.connect(this.analyser)\n        const dest = this.audioCtxTestMic.createMediaStreamDestination()\n        this.gainNode.connect(dest)\n        this.draw()\n        this.uiHandlers()\n    }\n    draw(){\n        const me  = this\n        const bufferLength = this.analyser.frequencyBinCount\n        const dataArray = new Uint8Array(bufferLength)\n        this.analyser.getByteTimeDomainData(dataArray)\n        setCanvasData(bufferLength, dataArray)\n        requestAnimationFrame(() => {\n            me.draw()\n        })\n    }\n    async connectSource(){\n        this.analyser.connect(this.audioCtxTestMic.destination)\n    }\n    disconnectSource(){\n        this.analyser.disconnect()\n    }\n    uiHandlers(){\n        const me = this\n        $('#testMicrophoneModal').on('show.bs.modal', (event) => {\n            gainSlider.value = me.CURRENT_GAIN_TEST_MIC\n            document.getElementById('current-input-gain-test-mic').value = me.CURRENT_GAIN_TEST_MIC\n        })\n        $('#testMicrophoneModal').on('hide.bs.modal', async (event) => {\n            me.analyser.disconnect()\n        })\n        \n        gainSlider.addEventListener('input', function () {\n            const newGainValue = parseFloat(this.value)\n            me.CURRENT_GAIN_TEST_MIC = newGainValue\n            me.gainNode.gain.value = newGainValue\n            me.recordGainNode.gain.value = newGainValue\n            localStorage.setItem('micgain', newGainValue)\n            document.getElementById('current-input-gain-test-mic').value = newGainValue\n        })\n    }\n}","const canvasRealTime = document.querySelector('.visualizer-test-mic')\nconst canvasCtx = canvasRealTime.getContext('2d')\nconst mainSection = document.querySelector('.main-controls-test-mic')\n\nexport const setCanvasData = (bufferLength, dataArray) => {\n    canvasRealTime.width = mainSection.offsetWidth\n    const WIDTH = canvasRealTime.width\n    const HEIGHT = canvasRealTime.height\n\n    canvasCtx.fillStyle = 'rgb(200, 200, 200)'\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT)\n\n    canvasCtx.lineWidth = 2\n    canvasCtx.strokeStyle = 'rgb(0, 0, 0)'\n\n    canvasCtx.beginPath()\n\n    let sliceWidth = (WIDTH * 1.0) / bufferLength\n    let x = 0\n\n    for (let i = 0; i < bufferLength; i++) {\n        let v = dataArray[i] / 128.0\n        let y = (v * HEIGHT) / 2\n\n        if (i === 0) {\n            canvasCtx.moveTo(x, y)\n        } else {\n            canvasCtx.lineTo(x, y)\n        }\n\n        x += sliceWidth\n    }\n\n    canvasCtx.lineTo(canvasRealTime.width, canvasRealTime.height / 2)\n    canvasCtx.stroke()\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$00dd97663630ab9a$export$a131b61ceae72f7a","$4TAOB","$00dd97663630ab9a$var$gainSlider","document","getElementById","constructor","CURRENT_GAIN_TEST_MIC","audioCtxTestMic","analyser","gainNode","recordGainNode","me","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","then","stream","getUserMediaOnSuccess","console","log","micGain","localStorage","getItem","parseInt","AudioContext","micsource","createMediaStreamSource","createGain","gain","value","connect","createAnalyser","fftSize","dest","createMediaStreamDestination","draw","uiHandlers","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","setCanvasData","requestAnimationFrame","connectSource","destination","disconnectSource","disconnect","$","on","event","addEventListener","newGainValue","parseFloat","setItem","$3908db37c08cb4c3$export$d4c23ad8b5f39249","$3908db37c08cb4c3$var$canvasRealTime","querySelector","$3908db37c08cb4c3$var$canvasCtx","getContext","$3908db37c08cb4c3$var$mainSection","width","offsetWidth","WIDTH","HEIGHT","height","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke"],"version":3,"file":"composition.f665144c.js.map"}