{"version":3,"sources":["composition/scripts/latencymeasure/latencyMeasurer.js","composition/scripts/latencymeasure/testlatency.js"],"names":["measurementStates","measure_average_loudness_for_1_sec","playing_and_listening","waiting","passthrough","idle","sumAudio","left","right","numberOfSamples","sum","n","Math","abs","latencyMeasurer","measurementState","nextMeasurementState","samplesElapsed","sineWave","threshold","state","samplerate","latencyMs","buffersize","roundTripLatencyMs","Array","fill","_samplerate","rampdec","averageAudioValue","referenceDecibel","log10","pow","averageInputValue","i","max","min","parseInt","ramp","mul","PI","sin","LATENCY","TestLatency","e","audioContext","audioNode","content","document","getElementById","audioWorklet","AudioWorkletNode","data","device","os","browser","browserVersion","runningon","displayStart","close","innerHTML","startbutton","createElement","innerText","addEventListener","start","appendChild","error","console","log","message","result","displayResult","latency","ms","createMediaStreamSource","inputStream","connect","destination","restartLink","div","alert","audioTracks","getAudioTracks","applyConstraints","autoGainControl","echoCancellation","noiseSuppression","toggle","lastState","createScriptProcessor","onaudioprocess","processInput","inputBuffer","getChannelData","length","processOutput","outputBuffer","onMessageFromAudioScope","onAudioSetupFinished","AudioContext","window","webkitAudioContext","latencyHint","sampleRate","navigator","mediaDevices","getUserMedia","mandatory","googAutoGainControl","googAutoGainControl2","googEchoCancellation","googNoiseSuppression","googHighpassFilter","googEchoCancellation2","googNoiseSuppression2","googDAEchoCancellation","googNoiseReduction","then","onAudioPermissionGranted","catch","onAudioInputPermissionDenied","initialize"],"mappings":"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","file":"testlatency.bef1548b.js","sourceRoot":"../webapp/src","sourcesContent":["/* Source: https://github.com/superpoweredSDK/WebBrowserAudioLatencyMeasurement */\nconst measurementStates = {\n    measure_average_loudness_for_1_sec: 0,\n    playing_and_listening: 1,\n    waiting: 2,\n    passthrough: 3,\n    idle: 4,\n};\n\nfunction sumAudio(left, right, numberOfSamples) {\n    \n    let sum = 0;\n    for (let n = 0; n < numberOfSamples; n++) {\n      sum += Math.abs(left[n]) + Math.abs(right[n]);\n    }\n    return sum;\n}\n\nclass latencyMeasurer {\n    constructor() {\n        this.measurementState = this.nextMeasurementState = measurementStates.idle;\n        this.samplesElapsed = this.sineWave = this.sum = this.threshold = this.state = this.samplerate = this.latencyMs = this.buffersize = 0;\n        this.roundTripLatencyMs = new Array(10).fill(0.0);\n    }\n\n    toggle() {\n        if ((this.state == -1) || ((this.state > 0) && (this.state < 11))) { // stop\n            this.state = 0;\n            this.nextMeasurementState = measurementStates.idle;\n        } else { // start\n            this.state = 1;\n            this.samplerate = this.latencyMs = this.buffersize = 0;\n            this.nextMeasurementState = measurementStates.measure_average_loudness_for_1_sec;\n        }\n    }\n\n    togglePassThrough() {\n      if (this.state != -1) {\n          this.state = -1;\n          this.nextMeasurementState = measurementStates.passthrough;\n      } else {\n          this.state = 0;\n          this.nextMeasurementState = measurementStates.idle;\n      }\n    }\n\n    processInput(left, right, _samplerate, numberOfSamples) {\n        this.rampdec = -1.0;\n        this.samplerate = _samplerate;\n        this.buffersize = numberOfSamples;\n\n        if (this.nextMeasurementState != this.measurementState) {\n            if (this.nextMeasurementState == measurementStates.measure_average_loudness_for_1_sec) this.samplesElapsed = 0;\n            this.measurementState = this.nextMeasurementState;\n        }\n\n        switch (this.measurementState) {\n            // Measuring average loudness for 1 second.\n            case measurementStates.measure_average_loudness_for_1_sec:\n                this.sum += sumAudio(left, right, numberOfSamples);\n                this.samplesElapsed += numberOfSamples;\n\n                if (this.samplesElapsed >= this.samplerate) { // 1 second elapsed, set up the next step.\n                    // Look for the audio energy rise of 24 decibel.\n                    let averageAudioValue = ((this.sum) / (this.samplesElapsed >> 1));\n                    let referenceDecibel = 20.0 * Math.log10(averageAudioValue) + 24.0;\n                    this.threshold = Math.pow(10.0, referenceDecibel / 20.0);\n\n                    this.measurementState = this.nextMeasurementState = measurementStates.playing_and_listening;\n                    this.sineWave = 0;\n                    this.samplesElapsed = 0;\n                    this.sum = 0;\n                }\n                break;\n\n            // Playing sine wave and listening if it comes back.\n            case measurementStates.playing_and_listening:\n                let averageInputValue = sumAudio(left, right, numberOfSamples) / numberOfSamples;\n                this.rampdec = 0.0;\n\n                if (averageInputValue > this.threshold) { // The signal is above the threshold, so our sine wave comes back on the input.\n                    let n = 0, i = 0;\n                    while (n < numberOfSamples) { // Check the location when it became loud enough.\n                        if (left[i] > this.threshold) break;\n                        if (right[i++] > this.threshold) break;\n                        n++;\n                    }\n                    this.samplesElapsed += n; // Now we know the total round trip latency.\n\n                    if (this.samplesElapsed > numberOfSamples) { // Expect at least 1 buffer of round-trip latency.\n                        this.roundTripLatencyMs[this.state - 1] = (this.samplesElapsed * 1000) / this.samplerate;\n\n                        let sum = 0, max = 0, min = 100000.0;\n                        for (n = 0; n < this.state; n++) {\n                            if (this.roundTripLatencyMs[n] > max) max = this.roundTripLatencyMs[n];\n                            if (this.roundTripLatencyMs[n] < min) min = this.roundTripLatencyMs[n];\n                            this.sum += this.roundTripLatencyMs[n];\n                        }\n\n                        if (max / min > 2.0) { // Dispersion error.\n                            this.latencyMs = 0;\n                            this.state = 10;\n                            this.measurementState = this.nextMeasurementState = measurementStates.idle;\n                        } else if (this.state == 10) { // Final result.\n                            this.latencyMs = parseInt(this.sum * 0.1);\n                            this.measurementState = this.nextMeasurementState = measurementStates.idle;\n                        } else { // Next step.\n                            this.latencyMs = parseInt(this.roundTripLatencyMs[this.state - 1]);\n                            this.measurementState = this.nextMeasurementState = measurementStates.waiting;\n                        }\n\n                        this.state++;\n                    } else this.measurementState = this.nextMeasurementState = measurementStates.waiting; // Happens when an early noise comes in.\n\n                    this.rampdec = 1.0 / numberOfSamples;\n                } else { // Still listening.\n                    this.samplesElapsed += numberOfSamples;\n\n                    // Do not listen to more than a second, let's start over. Maybe the environment's noise is too high.\n                    if (this.samplesElapsed > this.samplerate) {\n                        this.rampdec = 1.0 / numberOfSamples;\n                        this.measurementState = this.nextMeasurementState = measurementStates.waiting;\n                        this.latencyMs = -1;\n                    }\n                }\n                break;\n\n            case measurementStates.passthrough:\n            case measurementStates.idle: break;\n\n            default: // Waiting 1 second.\n                this.samplesElapsed += numberOfSamples;\n                this.sum = 0;\n                if (this.samplesElapsed > this.samplerate) { //  1 second elapsed, start over.\n                    this.samplesElapsed = 0;\n                    this.measurementState = this.nextMeasurementState = measurementStates.measure_average_loudness_for_1_sec;\n                }\n        }\n    }\n\n\n    processOutput(left, right) {\n        if (this.measurementState == measurementStates.passthrough) return;\n\n        if (this.rampdec < 0.0) { // Output silence.\n            let n = this.buffersize * 2, i = 0;\n            while (n--) left[i] = right[i++] = 0;\n        } else {\n            let ramp = 1.0, mul = (2.0 * Math.PI * 1000.0) /  this.samplerate; // 1000 Hz\n            let n = this.buffersize, i = 0;\n            while (n--) {\n                left[i] = right[i++] = Math.sin(mul * this.sineWave) * ramp;\n                ramp -= this.rampdec;\n                this.sineWave += 1.0;\n            }\n        }\n    }\n}\n\n\nexport { latencyMeasurer };\n","/* Source: https://github.com/superpoweredSDK/WebBrowserAudioLatencyMeasurement */\nimport { latencyMeasurer } from \"./latencyMeasurer.js\";\nexport let LATENCY = null\n\nclass TestLatency {\n\n    static initialize(e) {\n\n        TestLatency.audioContext = TestLatency.audioNode = null;\n\n        TestLatency.content = document.getElementById('content');\n        \n        let audioWorklet = (typeof AudioWorkletNode === 'function') ? 1 : 0;\n        TestLatency.data = {\n            device: '?',\n            os: '?',\n            browser: '?',\n            browserVersion: '?',\n            buffersize: audioWorklet ? 128 : 512,\n            samplerate: '?',\n            audioWorklet: audioWorklet\n        };\n        TestLatency.runningon = '?';\n        TestLatency.displayStart();\n    }\n\n    static displayStart() {\n        if (TestLatency.audioContext != null) TestLatency.audioContext.close();\n        TestLatency.audioContext = TestLatency.audioNode = null;\n        TestLatency.content.innerHTML = '';\n        TestLatency.startbutton = document.createElement('button');\n        TestLatency.startbutton.innerText = 'TEST LATENCY';\n        TestLatency.startbutton.addEventListener('click', TestLatency.start);\n        TestLatency.content.appendChild(TestLatency.startbutton);\n    }\n\n    static onAudioInputPermissionDenied(error) {\n        console.log(error)\n    }\n\n    static onMessageFromAudioScope(message) {\n        let result = null\n        if (message.latencyMs < 0) {\n            result = \"The environment is too loud! Please try it again in a quieter environment.\"\n            TestLatency.displayResult(result)\n        } else if (message.state == 11) {\n            if (message.latency < 1) {\n                result = \"The variance is too big. Please try it again in a quieter environment.\"\n                TestLatency.displayResult(result)\n            }\n            else {\n                TestLatency.data.ms = message.latency;\n                LATENCY = message.latency                \n                result = \"Result: \" + message.latency + \" ms\"\n                console.log(result)\n                TestLatency.displayResult(result)\n            }\n        } else {\n\n            //let percentage = ((parseInt(message.state) - 1) / 10) * 100;\n            //if (percentage < 1) percentage = 1; else if (percentage > 100) percentage = 100;\n            //console.log(percentage + '%')\n        }\n    }\n\n    static onAudioSetupFinished() {\n        let audioInput = TestLatency.audioContext.createMediaStreamSource(TestLatency.inputStream);\n        audioInput.connect(TestLatency.audioNode);\n        TestLatency.audioNode.connect(TestLatency.audioContext.destination);\n        console.log(\"Please wait...\")\n        let restartLink = document.createElement('button');\n        restartLink.innerText = 'CANCEL';\n        restartLink.addEventListener('click', TestLatency.displayStart);\n        TestLatency.content.appendChild(restartLink);\n    }\n\n    static displayResult(message) {\n        if (TestLatency.audioContext != null) TestLatency.audioContext.close();\n        TestLatency.audioContext = TestLatency.audioNode = null;\n        let div = document.createElement('div');\n        let restartLink = document.createElement('button');\n        restartLink.innerText = 'TRY AGAIN';\n        restartLink.addEventListener('click', TestLatency.displayStart);\n        div.appendChild(restartLink);\n        TestLatency.content.innerHTML = '';\n        TestLatency.content.appendChild(div);        \n        alert(message)        \n    }\n\n    static onAudioPermissionGranted(inputStream) {\n\n        TestLatency.inputStream = inputStream;\n        let audioTracks = inputStream.getAudioTracks();\n        for (let audioTrack of audioTracks) {\n            audioTrack.applyConstraints({ autoGainControl: false, echoCancellation: false, noiseSuppression: false });\n        }        \n\n        TestLatency.latencyMeasurer = new latencyMeasurer();\n        TestLatency.latencyMeasurer.toggle();\n        TestLatency.lastState = 0;        \n        TestLatency.audioNode = TestLatency.audioContext.createScriptProcessor(256, 2, 2);\n\n        TestLatency.audioNode.onaudioprocess = function (e) {\n\n            TestLatency.latencyMeasurer.processInput(e.inputBuffer.getChannelData(0), e.inputBuffer.getChannelData(1), TestLatency.data.samplerate, e.inputBuffer.length);\n            TestLatency.latencyMeasurer.processOutput(e.outputBuffer.getChannelData(0), e.outputBuffer.getChannelData(1));\n\n            if (TestLatency.lastState != TestLatency.latencyMeasurer.state) {\n                TestLatency.lastState = TestLatency.latencyMeasurer.state;\n                TestLatency.onMessageFromAudioScope({ state: TestLatency.lastState, latency: TestLatency.latencyMeasurer.latencyMs });\n            }\n        }\n\n        TestLatency.onAudioSetupFinished();     \n    }\n\n    static start(e) {\n        console.log(\"start...\")\n        let AudioContext = window.AudioContext || window.webkitAudioContext || false;\n        TestLatency.audioContext = new AudioContext({ latencyHint: 0 });\n        TestLatency.data.samplerate = TestLatency.audioContext.sampleRate;\n        let constraints = {\n            'echoCancellation': false,\n            'disableLocalEcho': false,\n            'autoGainControl': false,\n            'audio': { mandatory: { googAutoGainControl: false, googAutoGainControl2: false, googEchoCancellation: false, googNoiseSuppression: false, googHighpassFilter: false, googEchoCancellation2: false, googNoiseSuppression2: false, googDAEchoCancellation: false, googNoiseReduction: false } },\n            'video': false\n        };\n        if (navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia(constraints).then(TestLatency.onAudioPermissionGranted).catch(TestLatency.onAudioInputPermissionDenied);\n        }\n        else {\n            TestLatency.onAudioInputPermissionDenied(\"Can't access getUserMedia.\");\n        }\n    }\n}\n\nwindow.addEventListener('load', TestLatency.initialize);\n"]}